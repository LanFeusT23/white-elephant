rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;

      match /events/{eventId}{
        allow read: if isAuthenticated();
        allow create: if validateEvent(); 
        allow update: if validateEvent();
      }

      match /users/{userId}{
        allow read: if isAuthenticated();
        allow write: if request.auth.uid == userId
      }

      match /unwrappedGifts/{userId}{
        allow read: if isAuthenticated();
        allow write: if validateUnwrappedGift(userId);
      }

      match /wrappedGifts/{userId}{
        allow read: if isAuthenticated();
        allow write: if isAuthenticated();
      }

    }
  }

  function validateUnwrappedGift(userId){
    return isAuthenticated() && 
            request.auth.uid == userId && 
            request.resource.data.keys().hasOnly(["imageUrl"])
  }

  function isAuthenticated(){
    return request.auth != null;
  }

  function isMine(d){
    return request.auth.uid == d.createdBy;
  }

  function validateEvent(){
    return request.resource.data.keys().hasAll(["name", "createdBy", "maxSteals", "currentPlayer"]) &&
            isMine(request.resource.data) &&
            isEventNameValid()
  }

  function isEventNameValid(){
    return request.resource.data.name.size() < 100
  }

}